{"version":3,"file":"static/js/98.88f49d4c.chunk.js","mappings":"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","sources":["Components/Teacher/ExamAttendance.js"],"sourcesContent":["import React,{useState, useEffect} from 'react'  \nimport {useForm} from \"react-hook-form\" \nimport DataTable from 'react-data-table-component'\nimport {toast} from 'react-toastify'\n//import {ThreeDots} from 'react-loader-spinner' \n\nimport {useLazyListQuery, useAddExamAttendanceMutation, useParticularExamAttendanceMutation} from '../../redux/api/StudentApi.js' \nimport {useLazyListQuery as useLazyExamListQuery} from '../../redux/api/ExamApi.js'\nimport {useLazyListQuery as useLazyClassListQuery} from '../../redux/api/ClassApi.js'\n\nexport default function ExamAttendance() {\n    const [pageName] = useState([{\n        title_1 : 'ADD EXAM ATTENDANCE',\n        title_2 : 'DELETE SELECTED EXAM ATTENDANCE',\n        title_3 : \"EDIT EXAM ATTENDANCE\",\n        title_4 : \"EXAM ATTENDANCE\",\n        title_5 : \"ADD-MANAGE EXAM ATTENDANCE'S\",\n    }])\n\n    const [data,setData] = useState([]) \n    const [examData,setExamData] = useState([]) \n    const [classData,setClassData] = useState([]) \n    const [sectionData,setSectionData] = useState([])\n    const [subjectData,setSubjectData] = useState([]) \n   // const [dataID, setDataID] = useState(0) \n    const [classID, setClassID] = useState(0) \n    const [sectionID, setSectionID] = useState(0) \n    const [examID, setExamID] = useState(0) \n    const [subjectID, setSubjectID] = useState(0) \n    const [loaderVisible,setLoaderVisible] = useState(true)     \n\n    const {register, handleSubmit, formState: { errors }} = useForm()\n \n    //const [getAllRecord,{data:getAllValidationRecord}] = useLazyListQuery()\n    const [getAllExamRecord,{data:getAllExamValidationRecord}] = useLazyExamListQuery()\n    const [getAllClassRecord,{data:getAllValidationClassRecord}] = useLazyClassListQuery()\n    const [addAttendanceRecord] = useAddExamAttendanceMutation()\n    const [getAttendanceBaseStudentData] = useParticularExamAttendanceMutation()\n    \n    const columns = [\n        {\n            name: '#',\n            selector: (row,key) => key+1,\n            width:'50px'\n        },\n        {\n            name: 'Student List',\n            selector: row => row.student_name\n        },\n        {\n            name: 'Attendance',\n            selector: row => <>\n                <div className=\"form-check form-switch\">\n                    {\n                        (row.student_attendance_data?.length>0)?<input className=\"form-check-input\" type=\"checkbox\" onChange={(e)=>onSubmitAttendance(e,row._id)} value={1} checked />:<input className=\"form-check-input\" type=\"checkbox\" onChange={(e)=>onSubmitAttendance(e,row._id)} value={1}/>\n                    } \n                </div>\n            </>\n        },\n    ]\n\n    const onSubmitAttendance = (event,student_id) => { \n        setLoaderVisible(true)  \n        let is_checked = event.target.checked\n        \n        const data = {\n            attendance_class:classID,\n            attendance_section:sectionID,\n            attendance_subject:subjectID,\n            attendance_exam:examID,\n            is_checked:is_checked?1:0,\n            attendance_student_id:student_id, \n            attendance:(is_checked === 1)?1:0\n        }  \n       \n        addAttendanceRecord(data).then((response) => { \n            if(response?.data?.status){\n                toast.success(response.data.message) \n            }else{ \n                toast.error(response.error.data.message) \n            }  \n            const sendUpdateData = {\n                exam_class:classID,\n                exam_section:sectionID,\n                exam_subject:subjectID,\n                exam_name:examID,\n            }  \n            onSubmit(sendUpdateData)// for refresh\n        }).catch((error) => { \n            if (error) \n                toast.error(`Some tehnical issue.`)\n                setLoaderVisible(false)\n        });   \n    } \n    const onSubmit = (data) => { \n        setClassID(data.exam_class)\n        setSectionID(data.exam_section)\n        setSubjectID(data.exam_subject)\n        setExamID(data.exam_name)\n        setData([])\n        const sendData = {\n            class_id:data.exam_class,\n            section_id:data.exam_section,\n            subject_id:data.exam_subject,\n            exam_id:data.exam_name,\n        }\n        getAttendanceBaseStudentData(sendData).then((response)=>{  \n            setData(response?.data?.data) \n            setLoaderVisible(false)\n        }).catch((err)=>{ \n            toast.error(`Error : ${err.message}`)\n        })\n    }\n\n    useEffect(()=>{  \n        getAllClassRecord().then((response)=>{ \n            setClassData(response?.data?.data) \n            setLoaderVisible(false)\n        }).catch((err)=>{ \n            toast.error(`Error : ${err.message}`)\n        })\n    },[getAllValidationClassRecord])\n\n    const updateSectionData = () => {\n        const select_id = document.getElementById('classSelectBox')\n        const select_data = select_id.options[select_id.selectedIndex].id\n        const class_data = JSON.parse(select_data) \n        setSectionData(class_data.class_section)\n        setSubjectData(class_data.class_subject)\n    }\n    useEffect(()=>{\n        getAllExamRecord().then((response)=>{ \n            setExamData(response?.data?.data)  \n        }).catch((err)=>{ \n            toast.error(`Error : ${err.message}`)\n        })\n    },[getAllExamValidationRecord])\n    return ( \n        <>  \n            <div className=\"page-body\">\n                {loaderVisible?\n                <div class=\"loader-wrapper\">\n                    <div class=\"theme-loader\">    \n                        <div class=\"loader-p\"></div>\n                    </div>\n                </div>:''} \n                <div className=\"container-fluid\">\n                    <div className=\"page-title\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-6 ps-0\"><h3>{pageName[0].title_1}</h3></div>\n                            <div className=\"col-sm-6 pe-0\">\n                                <ol className=\"breadcrumb\">\n                                    <li className=\"breadcrumb-item\">\n                                        <a href=\"#\">\n                                            <svg className=\"stroke-icon\">\n                                                <use href=\"../assets/svg/icon-sprite.svg#stroke-home\"></use>\n                                            </svg>\n                                        </a>\n                                    </li> \n                                    <li className=\"breadcrumb-item active\">{pageName[0].title_1}</li>\n                                </ol>\n                            </div>\n                        </div>\n                    </div>\n                </div>  \n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        <div className=\"col-sm-12\">\n                            <div className=\"card\">\n                                <div className=\"card-body custom-card-list\">\n                                    <div className=\"list-product-header\"> \n                                        <form method=\"POST\" onSubmit={handleSubmit(onSubmit)} encType=\"multipart/form-data\"> \n                                        <div className=\"row align-left p-4\"> \n                                            <div className=\"col-md-3\">\n                                                <div className=\"form-floating\">\n                                                    <select className=\"form-select\" id=\"floatingSelectGrid\" {...register('exam_name', { required: 'This field is required.' })}> \n                                                        <option value=\"\">Select Exam</option>\n                                                        { (examData)?examData.map((examItem,key)=>{\n                                                            return(  \n                                                                <option value={examItem._id} key={key}>{examItem.exam_name}</option> \n                                                            )}):''\n                                                        }  \n                                                    </select>\n                                                    {errors.exam_name && <span className=\"error-message\">{errors.exam_name.message}</span>}\n                                                    <label for=\"floatingSelectGrid\">\n                                                        Please select section\n                                                    </label>\n                                                </div>\n                                            </div>  \n                                            <div className=\"col-md-2\">\n                                                <div className=\"form-floating\">\n                                                    <select className=\"form-select\" {...register('exam_class', { required: 'This field is required.' })} onChange={(e)=>{\n                                                                    updateSectionData(e.target.value)\n                                                                    setData([])\n                                                                }} id=\"classSelectBox\">  \n                                                        <option value=\"\">Select Class</option>\n                                                        { (classData)?classData.map((classItem,key)=>{\n                                                            return(  \n                                                                <option id={JSON.stringify(classItem)} value= {classItem._id} key={key}>{classItem.class_name}</option> \n                                                            )}):''\n                                                        }  \n                                                    </select>\n                                                    {errors.exam_class && <span className=\"error-message\">{errors.exam_class.message}</span>}\n                                                    <label for=\"floatingSelectGrid\">\n                                                        Please select class\n                                                    </label>\n                                                </div>\n                                            </div> \n                                            <div className=\"col-md-3\">\n                                                <div className=\"form-floating\">\n                                                    <select className=\"form-select\" id=\"floatingSelectGrid\" {...register('exam_section', { required: 'This field is required.' })}> \n                                                        <option value=\"\">Select Section</option>\n                                                        { (sectionData)?sectionData.map((sectionItem,key)=>{\n                                                            return(  \n                                                                <option value={sectionItem._id} key={key}>{sectionItem.section_name}</option> \n                                                            )}):''\n                                                        }  \n                                                    </select>\n                                                    {errors.exam_section && <span className=\"error-message\">{errors.exam_section.message}</span>}\n                                                    <label for=\"floatingSelectGrid\">\n                                                        Please select section\n                                                    </label>\n                                                </div>\n                                            </div> \n                                            <div className=\"col-md-2\">\n                                                <div className=\"form-floating\">\n                                                        <select className=\"form-select\" id=\"floatingSelectGrid\" {...register('exam_subject', { required: 'This field is required.' })}> \n                                                            <option value=\"\">Select Subject</option>\n                                                            { (subjectData)?subjectData.map((subjectItem,key)=>{\n                                                                return(  \n                                                                    <option value={subjectItem._id} key={key}>{subjectItem.subject_name}</option> \n                                                                )}):''\n                                                            }  \n                                                        </select>\n                                                        {errors.exam_subject && <span className=\"error-message\">{errors.exam_subject.message}</span>}\n                                                    <label for=\"floatingSelectGrid\">\n                                                        Please select subject\n                                                    </label>\n                                                </div>\n                                            </div> \n                                            <div className=\"col-md-2\">\n                                                <div className=\"form-floating\">\n                                                    <button type=\"submit\" className=\"btn btn-success-gradien border-dark me-3\" style={{height:'58px'}}>\n                                                        <b>Attendance</b>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div> \n                                        </form>\n                                    </div>\n                                    <div className=\"list-product\">\n                                        <DataTable\n                                            columns={columns}\n                                            data={data}\n                                            pagination \n                                            persistTableHead \n                                        />  \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div> \n        </div>    \n    </>\n    )\n}"],"names":["ExamAttendance","pageName","useState","title_1","title_2","title_3","title_4","title_5","data","setData","examData","setExamData","classData","setClassData","sectionData","setSectionData","subjectData","setSubjectData","classID","setClassID","sectionID","setSectionID","examID","setExamID","subjectID","setSubjectID","loaderVisible","setLoaderVisible","register","handleSubmit","formState","errors","useForm","getAllExamRecord","getAllExamValidationRecord","useLazyExamListQuery","getAllClassRecord","getAllValidationClassRecord","useLazyClassListQuery","addAttendanceRecord","useAddExamAttendanceMutation","getAttendanceBaseStudentData","useParticularExamAttendanceMutation","columns","name","selector","row","key","width","student_name","_row$student_attendan","_jsx","_Fragment","children","className","student_attendance_data","length","type","onChange","e","onSubmitAttendance","_id","value","checked","event","student_id","is_checked","target","attendance_class","attendance_section","attendance_subject","attendance_exam","attendance_student_id","attendance","then","response","_response$data","status","toast","success","message","error","onSubmit","exam_class","exam_section","exam_subject","exam_name","catch","sendData","class_id","section_id","subject_id","exam_id","_response$data2","err","concat","useEffect","_response$data3","_response$data4","_jsxs","class","href","method","encType","id","required","map","examItem","for","updateSectionData","select_id","document","getElementById","select_data","options","selectedIndex","class_data","JSON","parse","class_section","class_subject","classItem","stringify","class_name","sectionItem","section_name","subjectItem","subject_name","style","height","DataTable","pagination","persistTableHead"],"sourceRoot":""}